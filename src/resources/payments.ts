// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';

export class Payments extends APIResource {
  /**
   * Get payment line items from a subset of agencies using Program Management
   * Service, including payment justifications.
   */
  list(
    query: PaymentListParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<PaymentListResponse> {
    return this._client.get('/payments', { query, ...options });
  }

  /**
   * Get payment statistics
   */
  getStatistics(options?: RequestOptions): APIPromise<PaymentGetStatisticsResponse> {
    return this._client.get('/payments/statistics', options);
  }
}

export interface PaymentListResponse {
  meta: PaymentListResponse.Meta;

  result: PaymentListResponse.Result;

  success: boolean;
}

export namespace PaymentListResponse {
  export interface Meta {
    /**
     * The total amount of pages at current per_page limit
     */
    pages: number;

    /**
     * The total amount of results
     */
    total_results: number;
  }

  export interface Result {
    payments: Array<Result.Payment>;
  }

  export namespace Result {
    export interface Payment {
      /**
       * The agency's payment justification
       */
      agency_lead_justification: string;

      /**
       * The name of the agency which made this payment
       */
      agency_name: string;

      /**
       * A description of the award
       */
      award_description: string | null;

      /**
       * The Federal Award Identification Number
       */
      fain: string | null;

      /**
       * The unique award ID generated by the Program Support Center
       */
      generated_unique_award_id: string | null;

      /**
       * The name of the organization which received the payment
       */
      org_name: string | null;

      /**
       * The dollar value of the payment
       */
      payment_amt: number;

      /**
       * The date of the payment
       */
      payment_date: string;

      /**
       * The recipient's payment justification
       */
      recipient_justification: string;
    }
  }
}

export interface PaymentGetStatisticsResponse {
  result: PaymentGetStatisticsResponse.Result;

  success: boolean;
}

export namespace PaymentGetStatisticsResponse {
  export interface Result {
    agency: Array<Result.Agency>;

    org_names: Array<Result.OrgName>;

    request_date: Array<Result.RequestDate>;
  }

  export namespace Result {
    export interface Agency {
      agency_name: string;

      count: number;
    }

    export interface OrgName {
      count: number;

      org_name: string;
    }

    export interface RequestDate {
      count: number;

      date: string;
    }
  }
}

export interface PaymentListParams {
  /**
   * The field to filter by
   */
  filter?: 'agency_name' | 'date' | 'org_name';

  /**
   * The value to filter by
   */
  filter_value?: string;

  /**
   * The page number to check
   */
  page?: number;

  /**
   * The number of items per page from 1 to 500
   */
  per_page?: number;

  /**
   * The field to sort by
   */
  sort_by?: 'amount' | 'date';

  /**
   * The order to sort by
   */
  sort_order?: 'asc' | 'desc';
}

export declare namespace Payments {
  export {
    type PaymentListResponse as PaymentListResponse,
    type PaymentGetStatisticsResponse as PaymentGetStatisticsResponse,
    type PaymentListParams as PaymentListParams,
  };
}
